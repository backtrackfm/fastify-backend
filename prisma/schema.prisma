generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

enum UserType {
  ARTIST
  PRODUCER
  ENGINEER
}

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  name                 String
  password             String
  type                 UserType  @default(ARTIST)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now())
  createdProjects      Project[] @relation("ProjectByUser")
  collaboratedProjects Project[] @relation("ProjectIncludesUser")
}

model Project {
  id              String   @id @default(cuid())
  genre           String
  name            String
  tags            String[]
  coverArtStoragePath     String?
  description     String?
  createdBy       User     @relation("ProjectByUser", fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId String
  collaborators   User[]   @relation("ProjectIncludesUser")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  branches        Branch[]
}

model Branch {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  name        String
  description String?
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  versions    Version[]

  @@id([name, projectId])
}

model Version {
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  name            String
  tags            String[]
  description     String?
  branch          Branch    @relation(fields: [branchName, projectId], references: [name, projectId], onDelete: Cascade)
  branchName      String
  projectId       String
  previews        Preview[]
  filesStoragePath String? // A storage path that can be used to get URL to download the .als files

  @@id([name, branchName, projectId])
}

model Preview {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  title       String
  storagePath     String?
  version     Version  @relation(fields: [versionName, branchName, projectId], references: [name, branchName, projectId], onDelete: Cascade)
  versionName String
  branchName  String
  projectId   String
}
